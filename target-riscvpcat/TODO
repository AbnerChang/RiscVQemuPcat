Notes for RISCV, adapted from the MIPS TODO
-----------------------------------------------

General
-------
- The TLB emulation is very inefficient:
  QEMU's softmmu implements a x86-style MMU, with separate entries
  for read/write/execute, a TLB index which is just a modulo of the
  virtual address, and a set of TLBs for each user/kernel/supervisor
  MMU mode.
  MIPS has a single entry for read/write/execute and only one MMU mode.
  But it is fully associative with randomized entry indices, and uses
  up to 256 ASID tags as additional matching criterion (which roughly
  equates to 256 MMU modes). It also has a global flag which causes
  entries to match regardless of ASID.
  To cope with these differences, QEMU currently flushes the TLB at
  each ASID change. Using the MMU modes to implement ASIDs hinges on
  implementing the global bit efficiently.
- save/restore of the CPU state is not implemented (see machine.c). -- WHERE IS THIS USED?

MALTA system emulation (simulated RISCV board is based off of hw/mips_malta.c)
----------------------
- We fake firmware support instead of doing the real thing
- Real firmware (YAMON) falls over when trying to init RAM, presumably
  due to lacking system controller emulation.
- Bonito system controller not implemented
- MSC1 system controller not implemented
